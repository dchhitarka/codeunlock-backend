{"version":3,"sources":["components/Auth/Password.js"],"names":["ForgotPassword","useState","email","setEmail","msg","setMsg","err","setErr","isLoading","setIsLoading","submitForm","e","a","preventDefault","forgot","res","message","error","className","onSubmit","style","color","type","value","name","id","placeholder","onChange","target","required","ResetPassword","loading","setLoading","status","setStatus","history","useHistory","useEffect","reset","hash","init","then","push","pathname","state","useParams","undefined","password","setPassword","confirmPassword","setConfirmPassword","setColor","confirmColor","setConfirmColor","help","setHelp","update","length","fontSize","marginLeft"],"mappings":"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","file":"static/js/5.436ee092.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\nimport {forgot, reset, update} from '../Api/ActionCreators';\nimport Loading from '../Utility/Loading';\n\nexport function ForgotPassword(){\n    const [email, setEmail] = useState('');\n    const [msg, setMsg] = useState(null);\n    const [err, setErr] = useState(null);\n    const [isLoading, setIsLoading] = useState(false);\n    const submitForm = async e => {\n        e.preventDefault();\n        setIsLoading(true);\n        let res = await forgot(email)\n        // console.log(res);\n        setMsg(res?.message ?? null)\n        setErr(res?.error ?? null)\n        setIsLoading(false);\n    }\n\n    return (\n        <div className=\"login\">\n            <form className=\"login-form\" onSubmit={submitForm}>\n                <div className=\"form-header\">\n                    <div className=\"form-heading\">RESET YOUR PASSWORD</div>\n                    <div className=\"form-error\">{err}</div>\n                    <div className=\"form-error\" style={{color: \"green\"}}>{msg}</div>\n                </div>\n\n                <div className=\"form-input\">\n                    <label className=\"form-label\">Email</label>\n                    <input type=\"email\" value={email} name=\"email\" id=\"email\" placeholder=\"user@account.com\" onChange={e => setEmail(e.target.value)} required/>\n                </div>\n                <div className=\"form-submit\">\n                    <button className=\"form-button login-button active-button\">\n                        {isLoading ? 'Sending...' : 'SUBMIT'}\n                    </button>\n                </div>\n            </form>\n        </div>\n    )\n}\n\nexport function ResetPassword(){\n    const [loading, setLoading] = useState(true)\n    const [status, setStatus] = useState({})\n    const history = useHistory();\n    \n    useEffect(() => {\n        async function init(){\n            return await reset(hash)\n        }\n        init().then(res => setStatus(res));\n        setLoading(false)\n    // eslint-disable-next-line\n    }, [])\n\n    useEffect(() => {\n        if(status?.status === 410){\n            // console.log(status)\n            history.push({pathname: '/u/login', state: {err: status.error}})\n        }\n        else{\n            setMsg(status?.message ?? null)\n            setErr(status?.error ?? null)        \n        }\n    // eslint-disable-next-line\n    }, [status])\n    \n    const {hash} = useParams();\n    const [password, setPassword] = useState(undefined);\n    const [confirmPassword, setConfirmPassword] = useState(undefined);\n    const [msg, setMsg] = useState(null);\n    const [err, setErr] = useState(null);\n    // eslint-disable-next-line\n    const [color, setColor] = useState(\"rgba(0,0,0,0.2)\")\n    const [confirmColor, setConfirmColor] = useState(\"rgba(0,0,0,0.2)\")\n    const [help, setHelp] = useState(undefined);\n\n    const submitForm = async e => {\n        e.preventDefault()\n        if(password !== confirmPassword){\n            setErr(\"\")\n            setMsg(\"\")\n        }\n        let res = await update(hash, password)\n        setMsg(res?.message ?? null)\n        setErr(res?.error ?? null)\n    }\n\n    return (\n        <div className=\"login\">\n        {loading && <Loading />}\n        <form className=\"login-form\" onSubmit={submitForm}>\n            <div className=\"form-header\">\n                <div className=\"form-heading\">RESET YOUR PASSWORD</div>\n                <div className=\"form-error\">{err}</div>\n                <div className=\"form-error\" style={{color: \"green\"}}>{msg}</div>\n            </div>\n\n            <div className=\"form-input\">\n                <label className=\"form-label\">New Password</label>\n                <input type=\"password\" value={password} name=\"password\" id=\"password\" onChange={e => {\n                    setPassword(e.target.value)\n                    if(e.target.value.length < 5){\n                        setColor(\"red\")\n                        setHelp(\"Password must be greater than 5 characters\")\n                    }else{\n                        setColor(\"green\")\n                        setHelp(\"\")\n                    }\n                    if(confirmPassword !== \"\"){\n                        if(confirmPassword === password){\n                            setConfirmColor(\"green\")\n                            setHelp(\"Password Confirmed\")\n                        }else{\n                            setConfirmColor(\"red\")\n                            setHelp(\"Password does not match\")\n                        }\n                    }\n                }} required/>\n            </div>\n            <div className=\"password-msg\" style={{color: confirmColor, fontSize: \"12px\", marginLeft: \"8px\"}}>{help}</div>\n\n            <div className=\"form-input\">\n                <label className=\"form-label\">Confirm New Password</label>\n                <input type=\"password\" value={confirmPassword} name=\"cpassword\" id=\"cpassword\" onChange={e => {\n                    setConfirmPassword(e.target.value)\n                    if(e.target.value !== \"\"){\n                        if(e.target.value === password){\n                            setConfirmColor(\"green\")\n                            setHelp(\"Password Confirmed\")\n                        }else{\n                            setConfirmColor(\"red\")\n                            setHelp(\"Password does not match\")\n                        }\n                    }\n                }} required/>\n            </div>\n            <div className=\"password-msg\" style={{color: confirmColor, fontSize: \"12px\", marginLeft: \"8px\"}}>{help}</div>\n\n            <div className=\"form-submit\">\n                <button className=\"form-button login-button active-button\">RESET</button>\n            </div>\n        </form>\n    </div>\n\n    )\n}\n"],"sourceRoot":""}